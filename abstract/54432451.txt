The three core problems that can be identified with any SOA based system are: (i) service discovery, (ii) service selection, and (iii) service composition. Most of the previous researches have considered these three problems separately. However, we argue that these three problems are intrinsically related and hence, cannot be treated separately. We propose a proactive event-driven model where user activities and services are treated as events. We then graphically model a SOA system into a network of activities called "activity network" (ANet). The nodes of such a network are the services and the edges their mutual causal dependency. We show how both functional as well as contextual information can be incorporated into the network and then justify why that is necessary for solving the three problems mentioned hereby. We then propose an abstraction technique that helps us to simplify the ANet and provide an architectural platform where the three problems can be solved in an efficient manner.