Today's service systems are growing more complex and dynamic due to the coupling of functionalities required under different contexts, which asks for extra effort from both service users and services developers. An ideal service system shall provide just right functionalities and just enough qualities to its user under a given usage context. Moreover, the service shall adapt itself when requirements change. Service systems targeting at different application domains contain domain knowledge as well as reusable system assets that are currently available. In this paper, we propose an approach that integrates domain ontology reasoning and feature configuration during system service design and execution.