Current approaches to transactional support of distributed processes in service-oriented environments are limited to scenarios where the participant initiating the process maintains a controlling position throughout the lifetime of the process. This constraint impedes support of complex processes where participants may only possess limited local views on the overall process. Furthermore, there is little support of dynamic aspects: failure or exit of participants usually leads to cancelation of the whole process. In this paper, we address these limitations by introducing a framework that strengthens the role of the coordinator and allows for largely autonomous coordination of dynamic processes. We first discuss motivating examples and analyze existing approaches to transactional coordination. Subsequently, we present our framework TracG, which is based on WS-BusinessActivity. It contains at its core a set of rules for deciding on the ongoing confirmation or cancelation status of participants' work and protocol extensions for monitoring the progress of a process. Various types of participant vitality for a process are distinguished, facilitating the controlled exit of nonvital participants as well as continuation of a process in case of tolerable failures. The implementation of the framework is presented and discussed regarding interoperability issues.