Channel passing mechanisms enable dynamically determining destinations of message transferring. WS-CDL, a language developed by W3C for the specification of Web services choreographies, adopts channel passing to support dynamic Web services composition. A choreography can be projected into individual services or orchestration skeletons. It is a challenge to ensure the services generated from a choreography always have sufficient and correct channels to complete their collaboration. In fact, WS-CDL is not ready for rigorous validation and implementation with respect to channel passing, since it provides no structure for specifying explicitly which role should firstly initialize which channel variable. Here we propose an algorithm to uncover these implicit assumptions, that is implemented as an extension to Pi4SOA. With the help of the algorithm, some existing methods for verification and implementation can be applied on choreographies written in WS-CDL. In addition, we propose an approach to detect design defects in choreographies, and show how a defect is found from the main sample choreography in WS-CDL Primer. It seems that choreographies with channel passing are error prone. Methods and tools are necessary to support designers in this field. Also, we suggest improving the situation by adding a syntactical construct to WS-CDL.