UML view integration has been extensively studied in the area of model transformation in Model Driven Development. Empirical processing rules are among the most widely employed approaches for processing view abstraction, which can support model simplification, consistency checking, and management complexity reduction. However, empirical rules face some challenges such as completeness validation, consistency among rules, and composition priority arrangement. The challenge of rule composition is amplified in the environment of distributed model driven development for web service-based systems where redundant information/data is emphasized. The same redundant information can be expressed in different forms that comprise various topological structures for entity relationship networks representing the same part of the system. Such variation will result in choosing different compositions of rules executed in different orders, which will increase the severity of non-determinism from the empirical probability of some rules. In this paper, we propose a formal solution for addressing this challenge through constructing finite-state automaton for unifying empirical abstraction rules while relieving the side effects caused by redundancy. We investigate the effect of redundancy on rules application through designing a simulated distributed storage for an example diagram model. We also show the results obtained from a prototype implementation.