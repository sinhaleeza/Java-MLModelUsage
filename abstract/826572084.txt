Quality-aware service composition starts from an abstract workflow. The tasks of the workflow are associated with functional types for which concrete services can be retrieved from a registry. Abstract tasks have to be mapped to concrete services before the workflow is executed. The goal is to maximize the workflow quality by choosing the right combination of services. Spending more time in discovery and composition will increase the quality of the resulting workflow. Restricted resources motivate however the question about the optimal tradeoff between composition effort and solution quality. In this paper, we aggregate the three phases discovery, composition, and execution into a common cost metric. We motivate why this cost metric may dynamically change depending on the system state and the properties of the workflow at hand. We present and analyze an iterative algorithm that automatically balances the effort spent in different phases. We are able to prove a near-optimal number of iterations. Additionally, we provide extensive experimental evaluations showing that our algorithm significantly outperforms static approaches in dynamic scenarios.