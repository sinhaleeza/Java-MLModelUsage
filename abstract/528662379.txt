With the possibility of system crashes and network failures, the design of robust client/server interactions for collaborative process execution is a challenge. If a business process changes state, it sends messages to relevant processes to inform about this change. However, server crashes and network failures may result in loss of messages. In this case, the state change is performed by one party, resulting in state/behavior inconsistencies and possibly deadlocks. Our basic idea to solve this problem is to cache the response (in a synchronous interaction) if the state of the process instance has changed by the request message. The possible state inconsistencies are recognized and compensated by state-caching and retrying failed interactions. By doing this work, we have learnt the possible failures caused by system crashes and network failures. Our results make it possible to build robust interactions by using cached-based process transformations.