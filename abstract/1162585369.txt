Services are successful for applications with high levels of dynamicity and interoperability. Ironically the actual Service-Oriented Computing (SOC) technologies are such that interoperability is problematic if different platforms are used simultaneously, and dedicated tools for the support of most engineering tasks are essentially missing. We address the interoperability issue through the definition of a Service Abstract Machine (SAM) that observes a set of heterogeneous service platforms running on different machines and dynamically builds a reliable and homogeneous model of the global state. Conversely, changes in the state model, through SAM API are dynamically translated into the corresponding action(s) in the actual underlying SOC platforms. Evolution, extensibility and engineering support are addressed by dedicated software engineering environments that fully rely on the state model, as if SAM were a real SOC platform. The paper discusses the challenges we faced and the limits of our approach. We show how the system has been implemented, and we draw the early lessons of SAM second year of use.