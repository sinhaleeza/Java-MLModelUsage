In this era of the emerging digitized, mobilized, and cloudified enterprises, the concept of the "compos able business" is the most critical piece which ties everything together. The digital enterprise is here, and its prime characteristic is that is essentially detaches and segregates existing businesses and reassembles them according to market demands. Every industry, from transportation to eyewear is up for disruption, and developers are in the forefront of this movement. In turn, these developers are under intense pressure to accelerate time to market. The compos able enterprise approach requires a reconsideration of traditional models of the entire IT organization. These organization and their processes need to be broken up into components that follow certain key design principles such as The Minimal Functions with least Dependencies, portability, Shared Knowledge, Predictable Contracts and Maximized Human Value. The last three bullet points encapsulate the very definition of DevOps [3]. The concept of better integration between Development and Operations is a valuable objective. The goal is to foster measurable incremental cultural change to derive most overall value out of the union of people, process and technology. But the cultural issues, reward models, and risk allocation create obvious barriers in attaining those goals. The common industry belief is to use the compos able enterprise framework to build a platform using the right tools and you will have attained DevOps nirvana. In this paper we will explore valuable lessons learned from our mistakes in tool centric adoption of IT Infrastructure Library (ITIL) [8]. We will also show how we applied those lessons to develop a lightweight compos able/contextual DevOps framework that learns and measure itself to avoid those cultural pitfalls.