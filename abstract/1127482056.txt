Asynchronous invocation and continuation are common patterns in some middleware infrastructures for object-based distributed computing. Their benefits are particularly significant in distributed environments characterized by high communication latencies and coarse-grained operations. Therefore, Web services could strongly benefit from the adoption of these patterns to (1) overlap communication with computation, (2) reduce the high number of interactions typically needed to handle stateless services by migrating the state of a service as parameters of service operations, (3) intercept at run-time data dependencies among consecutive services in a composition not visible from service descriptions. Unfortunately, current semantics of Web services do not directly support the patterns, but some specifications (i.e. WS-addressing) can simplify their implementation. In the paper we present the patterns, their benefits, and a module that implements a flexible schema useful to perform asynchronous invocations in several contexts. This way, modelling composed services can benefit from abstractions whilst more sophisticated low-level interactions among services are automatically handled at run-time.