Traditional software development involves reusing and building upon off-the-shelf software libraries. This paradigm provides compile time availability of both, component interfaces as well as corresponding implementations. It enables developers to write programs that build on existing functionality without worrying much about the runtime. Service oriented computing presents a different environment that involves actively running components in the form of services. Here, a search step becomes necessary to first discover the component(s) that satisfy the specified requirements. Moreover, services may come up or go down dynamically leading to expiry of searched results which makes dependent programs highly brittle. In this paper, we propose a paradigm shift from objects to services as first class entities. We present service matching techniques defined across design time and runtime. Using these techniques we define language level operations involving services as operands leading to a novel approach for services based software development.