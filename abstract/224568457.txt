Service component architecture (SCA) defines a component model that allows for a late binding with a concrete implementation. Similarly, the SCA policy framework defines a policy mechanism that uses intents, which are high-level declarations of desired nonfunctional features that are bound to concrete policies at a later time. The definitions of intents are simple, but the actual intent application is complex. Meeting policy requirements requires application of intents at many points in an assembly, and presumes domain knowledge about the semantics and constraints related to using a particular combination of intents. We propose pattern based policy configuration to resolve these difficulties. Our proposed configuration system has two features: policy intent patterns and pattern application rules. Domain knowledge is encoded as roles and role constraints in policy intent patterns. Pattern application rules can be used to define how patterns are applied automatically. This paper takes the original approach of thinking about policy application from a compositional perspective; this reduces the complexity of meeting nonfunctional requirements for SCA assemblies and provides a validation framework for applied intents.