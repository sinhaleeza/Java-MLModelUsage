Composing a set of Web services as a service process is becoming a common practice, but it involves multiple service invocations over the network, which incurs a huge time cost. To accelerate its execution, we propose an engine-side block-based service process caching strategy (BPCS). It is based on, and derives its advantages from, three key ideas. First, the invocation of Web service embodies semantics which enables the application of semantic-based caching. Second, cachable blocks are identified from a service process and each block is equiped with a separate cache so that the time overhead of service invocation and caching can be minimized. Third, a replacement strategy is introduced taking into account time and space factors to manage the space allocation for a process with multiple caches. The algorithms and methods used in BPCS are introduced in detail. Finally, BPCS is validated with a detailed performance study on real service processes and Web services via comparison experiments, which shows considerable improvements of BPCS over other strategies.